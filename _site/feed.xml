<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-03-11T14:25:25-05:00</updated><id>http://localhost:4000//</id><entry><title type="html">machine learning + visualization + connectomics</title><link href="http://localhost:4000/brain/" rel="alternate" type="text/html" title="machine learning + visualization + connectomics" /><published>2017-03-02T00:00:00-05:00</published><updated>2017-03-02T00:00:00-05:00</updated><id>http://localhost:4000/brain</id><content type="html" xml:base="http://localhost:4000/brain/">&lt;p&gt;&lt;img src=&quot;/gfx/rainbow_brain.png&quot; alt=&quot;Rainbow Brain&quot; title=&quot;Rainbow Brain&quot; class=&quot;frontimg&quot; /&gt; &lt;img src=&quot;/gfx/chip_brain.png&quot; alt=&quot;Chip Brain&quot; title=&quot;Chip Brain&quot; class=&quot;frontimg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In connectomics, we create a map of the mammalian brain at nano-scale. For this, we acquire image stacks of rat brain using electron microscopy. These images are so high resolution that individual neurons (nerve cells) and their connections (synapses) are visible. &lt;!-- more --&gt; Machine learning algorithms then classify cell structures and connections in these extremely large (terabytes or petabytes) images since manual processing is impossible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/cells.jpg&quot; alt=&quot;Neurons in Rat Brain&quot; title=&quot;Neurons in Rat Brain&quot; /&gt;
&lt;small&gt;&lt;br /&gt;A slice of rat brain&lt;/small&gt;&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;loop&quot; style=&quot;object-fit:fill; float:right; margin-right:14px;&quot; class=&quot;frontimg&quot; title=&quot;Circuit board flight&quot;&gt;&lt;source src=&quot;/gfx/3dconnectomics.mp4&quot; type=&quot;video/mp4&quot; /&gt;&lt;/video&gt;
&lt;p&gt;The ultimate goals are to understand the wiring of the brain, to cure mental and neurological diseases, and also to derive new artificial intelligence methods. These goals are still far away and the next two milestones are a fully processed 100 micron cube and then the extension to a 1 milimeter cube of brain tissue. The video on the right shows selected neurons in a 100 micron cube.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;
[1] A. Suissa-Peleg, D. Haehn, S. Knowles-Barley, V. Kaynig, T.R. Jones, A. Wilson, R. Schalek, J.W. Lichtman, H. Pfister: &lt;a href=&quot;https://www.cambridge.org/core/journals/microscopy-and-microanalysis/article/div-classtitleautomatic-neural-reconstruction-from-petavoxel-of-electron-microscopy-datadiv/44219CFD1C9F1DE998BF8746F9F4C703&quot;&gt;Automatic Neural Reconstruction from Petavoxel of Electron Microscopy Data&lt;/a&gt;, Microscopy and Microanalysis, 2016.&lt;br /&gt;
[2] R. Schalek, D. Lee, N. Kasthuri, A. Suissa-Peleg, T.R. Jones, V. Kaynig, D. Haehn, H. Pfister, D. Cox, J.W. Lichtman: &lt;a href=&quot;https://www.cambridge.org/core/journals/microscopy-and-microanalysis/article/div-classtitlespan-classboldimaging-a-1-mmspanspan-classsupspan-classbold3spanspanspan-classboldvolume-of-rat-cortex-using-a-multibeam-semspandiv/CF83F558CF849A0E64A09BDA4EA74550&quot;&gt;Imaging a 1 mm 3 Volume of Rat Cortex Using a MultiBeam SEM&lt;/a&gt;, Microscopy and Microanalysis, 2016.
&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;proofreading&quot;&gt;proofreading&lt;/h2&gt;

&lt;p&gt;The automatic classification of cells and connections is far from perfect. Humans are needed to double-check the results. This task is called proofreading. In 2014, we published &lt;a href=&quot;http://rhoana.org/dojo/&quot;&gt;Dojo&lt;/a&gt;, an interactive proofreading software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/dojo.jpg&quot; alt=&quot;Interactive Proofreading using Dojo&quot; title=&quot;Interactive Proofreading using Dojo&quot; /&gt;
&lt;small&gt;&lt;br /&gt;The Dojo proofreading software to fix automatic labelings&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Dojo enables proofreading for completely untrained people, recruited from the street. The data and results from the published user study are available as &lt;a href=&quot;http://github.com/haehn/proofreading/&quot;&gt;The Proofreading Benchmark&lt;/a&gt;.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;loop&quot; style=&quot;object-fit:fill; float:left; margin-right:14px;&quot; class=&quot;frontimg&quot; title=&quot;Circuit board flight&quot;&gt;&lt;source src=&quot;/gfx/guidedproofreading_small.mp4&quot; type=&quot;video/mp4&quot; /&gt;&lt;/video&gt;
&lt;p&gt;We found that the majority of time during interactive proofreading is spent looking for errors.&lt;/p&gt;

&lt;p&gt;To reduce this, we developed the &lt;a href=&quot;http://github.com/VCG/guidedproofreading/&quot;&gt;Guided Proofreading&lt;/a&gt; system. Artifical intelligence suggests potential errors and corrections to a user and speeds up the proofreading task. Our results show that our trained classifier is also able to perform proofreading automatically - up to a certain threshold (and better than using Dojo :D). The video on the left shows the Guided Proofreading user interface in action, reducing proofreading to simple yes/no decisions.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;
[3] D. Haehn, S. Knowles-Barley, M. Roberts, J. Beyer, N. Kasthuri, J.W. Lichtman, H. Pfister: &lt;a href=&quot;http://ieeexplore.ieee.org/abstract/document/6875931/&quot;&gt;Design and evaluation of interactive proofreading tools for connectomics&lt;/a&gt;, IEEE transactions on visualization and computer graphics, 2014.&lt;br /&gt;
[4] D. Haehn, V. Kaynig, J. Tompkin, J.W. Lichtman, H. Pfister: &lt;a href=&quot;http://COMINGSOON&quot;&gt;Guided Proofreading of Automatic Segmentations for Connectomics&lt;/a&gt;, CoRR, 2017.
&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;visualization&quot;&gt;visualization&lt;/h2&gt;

&lt;p&gt;Brain data is beautiful - not only at nano-scale. In 2012, we developed &lt;a href=&quot;http://goXTK.com&quot;&gt;XTK&lt;/a&gt;, the first web-based visualization framework for medical imaging data such as MRI scans.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/mybrain.jpg&quot; alt=&quot;My Brain visualized using XTK&quot; title=&quot;My Brain visualized using XTK&quot; /&gt;
&lt;small&gt;&lt;br /&gt;A glimpse into my brain rendered from an MRI scan using XTK&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://slicedrop.com&quot;&gt;Slice:Drop&lt;/a&gt; is a web-based viewer for many medical imaging formats. It is based on XTK and used by clinicians, researchers, and patients every day. The software visualizes data without requiring any server uploads.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/slicedrop2.png&quot; alt=&quot;The Slice:Drop viewer&quot; title=&quot;The Slice:Drop viewer&quot; /&gt;
&lt;small&gt;&lt;br /&gt;The Slice:Drop viewer supports different visualizations&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;MRI data, as visualized by &lt;a href=&quot;http://goXTK.com&quot;&gt;XTK&lt;/a&gt; and &lt;a href=&quot;http://slicedrop.com&quot;&gt;Slice:Drop&lt;/a&gt;, is much smaller than connectomics data. To visualize brains at nano-scale, we developed the &lt;a href=&quot;http://github.com/rhoana/mb&quot;&gt;MBeam viewer&lt;/a&gt; for the &lt;a href=&quot;https://www.zeiss.com/microscopy/int/products/scanning-electron-microscopes/multisem.html&quot;&gt;ZEISS MultiSEM 505 microscope&lt;/a&gt;. Using this viewer, neuroscientists are able to view high resolution images immediately after acquisition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/multisem.jpg&quot; alt=&quot;The ZEISS MultiSEM 505 microscope with Jeff Lichtman in front of it&quot; title=&quot;The ZEISS MultiSEM 505 microscope with Jeff Lichtman in front of it&quot; /&gt; &lt;img src=&quot;/gfx/mbeam.png&quot; alt=&quot;The MBeam viewer&quot; title=&quot;The MBeam viewer&quot; /&gt;
&lt;small&gt;&lt;br /&gt;The ZEISS MultiSEM 505 microscope (with &lt;a href=&quot;http://lichtmanlab.fas.harvard.edu/&quot;&gt;Jeff Lichtman&lt;/a&gt; in front of it) and the MBeam viewer&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;From a software engineering standpoint, the MBeam viewer and Dojo provide overlapping functionality. In particular, the logic to cut-out parts of data for transfer and visualization is implemented in both products.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/bfly.png&quot; alt=&quot;Butterfly&quot; title=&quot;Butterfly&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Therefor, we now develop &lt;a href=&quot;http://github.com/rhoana/butterfly/&quot;&gt;Butterfly&lt;/a&gt;, a system for scalable data management and visualization, which unifies logic and visualization as separate modules. Using Butterfly, it is possible to rapidly develop new interactive visualizations of large scientific datasets.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;
[5] D. Haehn, N. Rannou, B. Ahtam, E. Grant, R. Pienaar: &lt;a href=&quot;http://www.frontiersin.org/10.3389/conf.fninf.2014.08.00101/event_abstract&quot;&gt;Neuroimaging in the browser using the X Toolkit&lt;/a&gt;, Frontiers in Neuroinformatics, 2014.&lt;br /&gt;
[6] D. Haehn, N. Rannou, E. Grant, R. Pienaar: &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=2503645&quot;&gt;Slice: drop: Collaborative medical imaging in the browser&lt;/a&gt;, ACM SIGGRAPH Computer Animation Festival, 2013.
&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;further reading&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.iarpa.gov/index.php/research-programs/microns&quot;&gt;Machine Intelligence from Cortical Networks (MICrONS)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://neurodata.io/&quot;&gt;Terascale Neuroscience&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/FNNDSC/ami#readme&quot;&gt;AMI.js: Medical Imaging JavaScript ToolKit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://afruehstueck.github.io/TF.html&quot;&gt;A Transfer Function Editor for Browsers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/google/neuroglancer&quot;&gt;Neuroglancer: a WebGL-based viewer for volumetric data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ironman5366.github.io/learn-blog/&quot;&gt;Machine Learning for humans&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://vcg.seas.harvard.edu/&quot;&gt;The Visual Computing Group @ Harvard&lt;/a&gt;&lt;/p&gt;</content><summary type="html">In connectomics, we create a map of the mammalian brain at nano-scale. For this, we acquire image stacks of rat brain using electron microscopy. These images are so high resolution that individual neurons (nerve cells) and their connections (synapses) are visible.</summary></entry><entry><title type="html">(Un-)Format</title><link href="http://localhost:4000/(Un-)Format/" rel="alternate" type="text/html" title="(Un-)Format" /><published>2017-02-09T00:00:00-05:00</published><updated>2017-02-09T00:00:00-05:00</updated><id>http://localhost:4000/(Un-)Format</id><content type="html" xml:base="http://localhost:4000/(Un-)Format/">&lt;p&gt;&lt;img src=&quot;/gfx/posts/whitemacbook_small.jpg&quot; alt=&quot;White Macbook running Xubuntu&quot; title=&quot;White Macbook running Xubuntu&quot; class=&quot;thumb&quot; /&gt; I recently wiped a white Macbook 3.1 from 2007 to install Xubuntu. It turned out that important data was lost during this (or even during a re-installation two years ago).&lt;/p&gt;

&lt;p&gt;Luckily, with some magic I was able to restore all lost data. &lt;!-- more --&gt; For this, I used the free software &lt;a href=&quot;http://www.cgsecurity.org/wiki/PhotoRec&quot;&gt;PhotoRec&lt;/a&gt; by &lt;a href=&quot;http://www.cgsecurity.org/wiki/CV_Christophe_GRENIER&quot;&gt;Monsieur Grenier&lt;/a&gt;. In Ubuntu, it can be installed as a bundle with &lt;a href=&quot;http://www.cgsecurity.org/wiki/TestDisk&quot;&gt;TestDisk&lt;/a&gt; (which is another great tool) using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install testdisk&lt;/code&gt;. Launch &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo photorec&lt;/code&gt; for root access.&lt;/p&gt;

&lt;p&gt;The first step is to select the disk to work on (in my case &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sda&lt;/code&gt;). I also have an external hard drive (&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sdb&lt;/code&gt;) hooked up to store recovered data somewhere else and to not overwrite any potentially yet un-recovered data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/posts/pr1.png&quot; alt=&quot;Selecting the disk in PhotoRec&quot; title=&quot;Selecting the disk in PhotoRec&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since I partitioned the disk during re-installation, I choose the &lt;em&gt;[Whole disk]&lt;/em&gt; rather than any partition for recovery. For speed, it is recommended to limit data recovery to the relevant filetypes (f.e. .pdf, .jpg and .zip) using the &lt;em&gt;File Opt&lt;/em&gt; menu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/posts/pr2.png&quot; alt=&quot;Selecting the partition in PhotoRec&quot; title=&quot;Selecting the partition in PhotoRec&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The software needs to know the filesystem type. The laptop was running OS X prior re-installation so my choice is &lt;em&gt;Other&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/posts/pr3.png&quot; alt=&quot;Selecting the filesystem type in PhotoRec&quot; title=&quot;Selecting the filesystem type in PhotoRec&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recovery starts after selecting the output folder (for me &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sdb/&lt;/code&gt;). &lt;a href=&quot;http://www.cgsecurity.org/wiki/PhotoRec&quot;&gt;PhotoRec&lt;/a&gt; reports all recoveries while running and can take multiple hours. This also depends on the second hard drive to store the recovered files - the faster, the better.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/posts/pr4.png&quot; alt=&quot;PhotoRec in action&quot; title=&quot;PhotoRec in action&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recovered files are stored in folders &lt;code class=&quot;highlighter-rouge&quot;&gt;recup_dir.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;recup_dir.2&lt;/code&gt;, …&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/posts/pr5.png&quot; alt=&quot;PhotoRec in action&quot; title=&quot;PhotoRec in action&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;… And there are multiple ways of restoring the original filenames or sorting the recovered files &lt;a href=&quot;http://www.cgsecurity.org/wiki/After_Using_PhotoRec&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gfx/posts/pr6.png&quot; alt=&quot;PhotoRec in action&quot; title=&quot;PhotoRec in action&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, everybody was absolutely ecstatic to restore the lost data! Thank you, &lt;a href=&quot;http://www.cgsecurity.org/wiki/CV_Christophe_GRENIER&quot;&gt;Monsieur Grenier&lt;/a&gt;! And btw, &lt;a href=&quot;http://www.xubuntu.org/&quot;&gt;Xubuntu&lt;/a&gt; runs awesome on this device!&lt;/p&gt;</content><summary type="html">I recently wiped a white Macbook 3.1 from 2007 to install Xubuntu. It turned out that important data was lost during this (or even during a re-installation two years ago).

Luckily, with some magic I was able to restore all lost data.</summary></entry><entry><title type="html">Threaded Tornado</title><link href="http://localhost:4000/Threaded-Tornado/" rel="alternate" type="text/html" title="Threaded Tornado" /><published>2017-02-02T00:00:00-05:00</published><updated>2017-02-02T00:00:00-05:00</updated><id>http://localhost:4000/Threaded-Tornado</id><content type="html" xml:base="http://localhost:4000/Threaded-Tornado/">&lt;p&gt;&lt;img src=&quot;/gfx/posts/tornado_small.png&quot; alt=&quot;Tornado Webserver&quot; title=&quot;Tornado Webserver&quot; class=&quot;thumb underlay&quot; /&gt; The &lt;a href=&quot;http://www.tornadoweb.org/&quot;&gt;Tornado webserver&lt;/a&gt; is an awesome web framework for Python. Unfortunately, configuring it for asynchronous requests can get quite confusing.&lt;/p&gt;

&lt;p&gt;Here is a simple and minimal example, &lt;a href=&quot;http://blog.hoff.in&quot;&gt;John&lt;/a&gt; and I created. &lt;!-- more --&gt; It was inspired by several other examples, such as &lt;a href=&quot;http://www.tornadoweb.org/en/stable/guide/async.html&quot;&gt;the official documentation&lt;/a&gt;, &lt;a href=&quot;http://www.tornadoweb.org/en/stable/faq.html&quot;&gt;the official faq&lt;/a&gt; and &lt;a href=&quot;ask john&quot;&gt;this GIST&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main component is the following decorated &lt;code class=&quot;highlighter-rouge&quot;&gt;@tornado.gen.coroutine&lt;/code&gt;-skeleton:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@tornado.gen.coroutine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SOME_HANDLER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# we need a ThreadPoolExecutor!&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SOME_RESULT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXECUTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOME_OTHER_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;SOME_ARGUMENT_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOME_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;SOME_ARGUMENT_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ANOTHER_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOME_RESULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;EXECUTOR&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;ThreadPoolExecutor&lt;/code&gt; - coming from the &lt;a href=&quot;https://docs.python.org/3/library/concurrent.futures.html&quot;&gt;future&lt;/a&gt;! By using this skeleton, &lt;code class=&quot;highlighter-rouge&quot;&gt;SOME_OTHER_FUNCTION&lt;/code&gt; gets called in a &lt;em&gt;non-blocking&lt;/em&gt; way (which is the whole point).&lt;/p&gt;

&lt;p&gt;Below is a full example which sets up tornado on port 8888. As soon as a client connects, an external &lt;code class=&quot;highlighter-rouge&quot;&gt;Core&lt;/code&gt; instance handles the request and artificially sleeps for ten seconds. During this sleep, nothing is blocked.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tornado&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tornado.gen&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tornado.web&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;concurrent.futures&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThreadPoolExecutor&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# pip install futures&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'''
  The core can be anything outside of tornado!
  '''&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'going to sleep'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_ip&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'done sleeping'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_ip&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'msg to client '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_ip&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tornado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'''
  Our custom request handler who implements a co-routine
  and forwards the calls to an external class instance (core).
  '''&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_executor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_core&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_webserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webserver&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@tornado.gen.coroutine&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    This method has to be decorated as a coroutine!
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remote_ip&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# yield is important here&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# and obviously, the executor!&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# we connect the get handler now to the core&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8888&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    '''&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    '''&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# the important part here is the ThreadPoolExecutor being&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# passed to the main handler, as well as an instance of core&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;webapp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tornado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'(/)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'executor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                               &lt;span class=&quot;s&quot;&gt;'core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;s&quot;&gt;'webserver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;webapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tornado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ioloop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOLoop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;



&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# THE ENTRYPOINT&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Run the python code and then use the following bash code to simulate multiple parallel requests (via curl, since browsers skip forced multiple requests):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;V &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1 2 3 4 5 6 7 8 9 10 11 12 13
&lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;curl -i http://localhost:8888/ &amp;amp;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, tornado will print something along these lines…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;going to sleep 127.0.0.1
going to sleep 127.0.0.1
going to sleep 127.0.0.1
going to sleep 127.0.0.1
going to sleep 127.0.0.1
going to sleep 127.0.0.1
going to sleep 127.0.0.1
going to sleep 127.0.0.1
going to sleep 127.0.0.1
going to sleep 127.0.0.1
done sleeping 127.0.0.1
going to sleep 127.0.0.1
done sleeping 127.0.0.1
going to sleep 127.0.0.1
done sleeping 127.0.0.1
going to sleep 127.0.0.1
done sleeping 127.0.0.1
done sleeping 127.0.0.1done sleeping 127.0.0.1

 done sleeping done sleeping127.0.0.1 
127.0.0.1
done sleeping 127.0.0.1
done sleeping 127.0.0.1
done sleeping 127.0.0.1
done sleeping 127.0.0.1
done sleeping 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;…Ten requests ran fully async. Yippee!!&lt;/p&gt;</content><summary type="html">The Tornado webserver is an awesome web framework for Python. Unfortunately, configuring it for asynchronous requests can get quite confusing.

Here is a simple and minimal example, John and I created.</summary></entry></feed>
